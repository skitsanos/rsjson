version: 3

silent: true

vars:
  DOCKER_TAG: openresty-rjson

tasks:
  tooling-windows:
    cmds:
      - cmd: |
          powershell -c '
          Invoke-WebRequest -Uri "https://deac-riga.dl.sourceforge.net/project/luabinaries/5.4.2/Windows%20Libraries/Dynamic/lua-5.4.2_Win64_dll17_lib.zip?viasf=1" -OutFile "lua54.zip"
          Expand-Archive -Path "lua54.zip" -DestinationPath "_tools\Lua\5.4" -Force
          
          Invoke-WebRequest -Uri "https://github.com/LuaJIT/LuaJIT/archive/refs/heads/v2.1.zip" -Outfile "luajit.zip"
          Expand-Archive -Path "luajit.zip" -DestinationPath "_tools\luajit" -Force
          
          Invoke-WebRequest -Uri "https://www.lua.org/ftp/lua-5.4.6.tar.gz" -Outfile "lua-5.4.6.tar.gz"
          tar -xzf  "lua-5.4.6.tar.gz" -C "_tools"
          New-Item -Path "_tools\lua-5.4.6\lib\" -ItemType Directory -Force
          Copy-Item -Path "_tools\Lua\5.4\lua54.dll" -Destination "_tools\lua-5.4.6\lib\lua54.dll"
          Copy-Item -Path "_tools\Lua\5.4\lua54.lib" -Destination "_tools\lua-5.4.6\lib\lua5.4.lib"
          '

  tooling-darwin:
    cmds:
      - brew update && brew upgrade
      - brew install luajit
      - brew install lua@5.4
      - brew install luarocks
      - sudo luarocks install dkjson

  tooling-linux:
    cmds:
      - sudo apt install -y luarocks lua5.4 luajit liblua5.4-dev libluajit-5.1-dev
      - sudo luarocks install dkjson

  tooling:
    cmds:
      - task: tooling-{{OS}}

  build-luajit-darwin:
    dir: rsjson
    cmds:
      - echo "Building LuaJIT version..."
      - cargo clean
      - cmd: |
          export LUAJIT_DIR=$(brew --prefix luajit)
          export LUAJIT_INCLUDE_DIR="$LUAJIT_DIR/include/luajit-2.1"
          cargo build --release --no-default-features --features luajit
      - cmd: test -f target/release/librsjson.dylib || (echo "Build failed" && exit 1)

  build-luajit-linux:
    dir: rsjson
    cmds:
      - cargo clean
      - cmd: |
          export LUAJIT_DIR=/usr
          export LUAJIT_INCLUDE_DIR="$LUAJIT_DIR/include/luajit-2.1"
          cargo build --release --no-default-features --features luajit

  build-luajit-windows:
    dir: rsjson
    env:
      LUAJIT_DIR: ..\_tools\luajit\LuaJIT-2.1\
      LUAJIT_INCLUDE_DIR: ..\_tools\luajit\LuaJIT-2.1\src
    cmds:
      - cargo clean
      - cmd: |
          cargo build --release --no-default-features --features luajit
      - cmd: if not exist target\release\rsjson.dll (echo Build failed && exit /b 1)

  build-lua-darwin:
    dir: rsjson
    cmds:
      - cargo clean
      - cmd: |
          export LUA_DIR=$(brew --prefix lua)
          export LUA_INCLUDE_DIR="$LUA_DIR/include/lua"
          cargo build --release --no-default-features --features lua54
      - cmd: test -f target/release/librsjson.dylib || (echo "Build failed" && exit 1)

  build-lua-linux:
    dir: rsjson
    cmds:
      - cargo clean
      - cmd: |
          sudo apt install -y liblua5.4-dev
          export LUA_DIR=/usr
          export LUA_INCLUDE_DIR="$LUA_DIR/include/lua5.4"
          cargo build --release --no-default-features --features lua54
      - cmd: test -f target/release/librsjson.so || (echo "Build failed" && exit 1)

  build-lua-windows:
    dir: rsjson
    env:
      LUA_DIR: ..\_tools\Lua\5.4
      LUA_INCLUDE_DIR: ..\_tools\Lua\5.4\include
    cmds:
      - cargo clean
      - cmd: |
          powershell -c '
          cargo build --release --no-default-features --features lua54
          '

  build-luajit:
    cmds:
      - echo "Building LuaJIT version..."
      - task: build-luajit-{{OS}}

  build-lua:
    cmds:
      - echo "Building Lua 5.4 version..."
      - task: build-lua-{{OS}}

  build:
    cmds:
      - task: build-luajit
      - task: build-lua

  test-luajit-darwin:
    dir: src-lua
    env:
      LUA_CPATH: ../rsjson/target/release/lib?.dylib
    cmds:
      - echo "Testing LuaJIT..."
      - luajit -e 'print("LuaJIT is working!")'
      - echo "Testing LuaJIT with rsjson..."
      - luajit test.lua

  test-luajit-linux:
    dir: src-lua
    env:
      LUA_CPATH: ../rsjson/target/release/lib?.so
    cmds:
      - echo "Testing LuaJIT..."
      - luajit -e 'print("LuaJIT is working!")'
      - echo "Testing LuaJIT with rsjson..."
      - luajit test.lua

  test-lua-darwin:
    dir: src-lua
    env:
      LUA_CPATH: ../rsjson/target/release/lib?.dylib
    cmds:
      - echo "Testing Lua 5.4..."
      - lua -e 'print("Lua 5.4 is working!")'
      - echo "Testing Lua 5.4 with rsjson..."
      - lua test.lua

  test-lua-linux:
    dir: src-lua
    env:
      LUA_CPATH: ../rsjson/target/release/lib?.so
    cmds:
      - echo "Testing Lua 5.4..."
      - lua -e 'print("Lua 5.4 is working!")'
      - echo "Testing Lua 5.4 with rsjson..."
      - lua5.4 test.lua

  test:
    cmds:
      - task: test-luajit-{{OS}}
      - task: test-lua-{{OS}}

  benchmark:
    dir: src-lua
    env:
      LUA_CPATH: ../rsjson/target/release/lib?.dylib
    cmds:
      - echo "Benchmarking Lua..."
      - lua benchmark.lua

  clean:
    cmds:
      - rm -rf rsjson/target
      - echo "All build artifacts removed."

  version:
    cmds:
      - echo "Current version:"
      - grep version rsjson/Cargo.toml | head -n 1
      - echo "Enter new version:"
      - read -p "> " NEW_VERSION
      - sed -i '' "s/^version = .*/version = \"$NEW_VERSION\"/" rsjson/Cargo.toml
      - echo "Version updated to $NEW_VERSION"

  docker-build:
    dir: docker
    cmds:
      - mkdir -p ./app/lib
      - cp ../src-lua/rsjson.lua ./app/lib/rsjson.lua
      - docker build --progress plain -t {{.DOCKER_TAG}} -f Dockerfile.luajit ..

  docker-test:
    dir: docker
    cmds:
      - chmod +x test-simple.sh
      - ./test-simple.sh

  docker-test-all:
    dir: docker
    cmds:
      - chmod +x test-all.sh
      - ./test-all.sh

  docker-run:
    dir: docker
    cmds:
      - docker run -it --rm -d -p "8000:80" {{.DOCKER_TAG}}

  help:
    cmds:
      - echo "Available tasks:"
      - cmd: |
          echo "  build-luajit : Build the LuaJIT version"
          echo "  build-lua    : Build the Lua 5.4 version"
          echo "  build        : Build both versions"
          echo "  test-luajit  : Test the LuaJIT version"
          echo "  test-lua     : Test the Lua 5.4 version"
          echo "  test         : Run all tests"
          echo "  clean        : Remove all build artifacts"
          echo "  version      : Update the version number"
          echo "  docker-build : Build the Docker image"
          echo "  docker-run   : Run the Docker container"

  default:
    cmds:
      - task: help
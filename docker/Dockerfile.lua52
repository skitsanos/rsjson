# Multi-stage build for Lua 5.2
FROM alpine:latest AS builder
LABEL authors="skitsanos"
LABEL lua_version="5.2"

# Install build dependencies and Lua 5.2 development headers
RUN apk add --no-cache \
    build-base \
    rust \
    cargo \
    clang \
    clang-dev \
    lua5.2-dev

# Copy only Cargo files first to leverage Docker cache
COPY Cargo.toml Cargo.lock /build/
COPY rsjson/Cargo.toml /build/rsjson/
COPY rsjson/build.rs /build/rsjson/

# Create a dummy main.rs to enable dependency caching
RUN mkdir -p /build/rsjson/src && echo 'fn main() {}' > /build/rsjson/src/main.rs

WORKDIR /build/rsjson

# Build dependencies (this layer will be cached)
RUN LUA_INCLUDE_DIR=/usr/include/lua5.2 LUA_DIR=/usr cargo build --release --no-default-features --features lua52 || true

# Remove dummy main.rs
RUN rm -rf /build/rsjson/src

# Copy actual source code
COPY rsjson/src /build/rsjson/src

# Build the actual project
RUN LUA_INCLUDE_DIR=/usr/include/lua5.2 LUA_DIR=/usr cargo build --release --no-default-features --features lua52

# Runtime stage
FROM alpine:latest AS runtime
LABEL authors="skitsanos"
LABEL lua_version="5.2"

# Install runtime dependencies
RUN apk add --no-cache libgcc lua5.2 && mkdir -p /app/lib

# Copy built library from builder stage
COPY --from=builder /build/rsjson/target/release/librsjson.so /app/lib/
RUN ln -s /app/lib/librsjson.so /app/lib/rsjson.so

# Copy test script
COPY docker/app/test.lua /app/

# Set up Lua package path to find rsjson
ENV LUA_CPATH="/app/lib/?.so;;"

WORKDIR /app

# Run tests
CMD ["lua5.2", "test.lua"]
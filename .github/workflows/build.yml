name: Build rsjson lib

on: push

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Set env
        if: matrix.os != 'windows-latest'
        run: |
          echo "TAG_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
          VERSION="${{ github.ref_name }}"
          echo "VERSION=${VERSION#v}" >> $GITHUB_ENV
          ROCKS_VERSION=$(echo ${VERSION#v} | sed 's/\.\([0-9]*\)$/-\1/')
          echo "ROCKS_VERSION=$ROCKS_VERSION" >> $GITHUB_ENV

      - name: Set env (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "TAG_NAME=${{ github.ref_name }}" >> $env:GITHUB_ENV
          $version = "${{ github.ref_name }}".Substring(1)
          echo "VERSION=$version" >> $env:GITHUB_ENV
          $rocksVersion = $version -replace '\.(?=\d+$)', '-'
          echo "ROCKS_VERSION=$rocksVersion" >> $env:GITHUB_ENV

      - name: Install Task (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install go-task -y

      - name: Install Task (Darwin)
        if: matrix.os == 'darwin-latest'
        run: |
          brew install go-task

      - name: Install Task (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo snap install task --classic

      - name: Print the version
        run: |
          echo "Tag: ${{ github.ref_name }}"
          echo "Version: ${{ env.VERSION }}"
          echo "Rocks Version: ${{ env.ROCKS_VERSION }}"
          echo "OS: ${{ matrix.os }}"
          echo "$(task --version)"

      - name: Build
        run: task build

      - name: Upload Artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: rsjson-linux
          path: target/release/librsjson.so

      - name: Upload Artifact (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: rsjson-macos
          path: target/release/librsjson.dylib

      - name: Upload Artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: rsjson-windows
          path: target/release/rsjson.dll

      - name: Install LuaRocks (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt upgrade -y
          sudo apt install build-essential libreadline-dev unzip clang libclang-dev
          sudo snap install task --classic
          sudo apt install -y luarocks lua5.4 luajit liblua5.4-dev libluajit-5.1-dev
          sudo luarocks install dkjson

      - name: Install LuaRocks (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install luarocks
          luarocks install dkjson

      - name: Install LuaRocks (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install luarocks
          luarocks install dkjson
#
#      - name: Prepare rockspec file (Non-Windows)
#        if: matrix.os != 'windows-latest'
#        run: |
#          # load 'rsjson-template.rockspec' and replace '{{VERSION}}' with the current version
#          sed "s/{{VERSION}}/${{ env.ROCKS_VERSION }}/g" rsjson-template.rockspec > rsjson-${{ env.ROCKS_VERSION }}.rockspec
#
#      - name: Prepare rockspec file (Windows)
#        if: matrix.os == 'windows-latest'
#        run: |
#          # load 'rsjson-template.rockspec' and replace '{{VERSION}}' with the current version
#          (Get-Content rsjson-template.rockspec) -replace '{{VERSION}}', $env:ROCKS_VERSION | Set-Content rsjson-${{ env.ROCKS_VERSION }}.rockspec
#
#      - name: Build LuaRocks Package (Non-Windows)
#        if: matrix.os != 'windows-latest'
#        run: |
#          sudo luarocks make --pack-binary-rock rsjson-${{ env.ROCKS_VERSION }}.rockspec
#
#      - name: Build LuaRocks Package (Windows)
#        if: matrix.os == 'windows-latest'
#        run: |
#          luarocks make --pack-binary-rock rsjson-${{ env.ROCKS_VERSION }}.rockspec
#
#      - name: Upload LuaRocks Package
#        uses: actions/upload-artifact@v4
#        with:
#          name: rsjson-${{ matrix.os }}.rock
#          path: rsjson-${{ env.ROCKS_VERSION }}.*.rock
#
#      - name: Release
#        if: startsWith(github.ref, 'refs/tags/')
#        uses: softprops/action-gh-release@v2
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ env.TAG_NAME }}
#          files: |
#            rsjson-${{ env.ROCKS_VERSION }}.*.rock
#            *.so
#            *.dylib
#            *.dll
#

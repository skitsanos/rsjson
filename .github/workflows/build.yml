name: Build rsjson lib

on: 
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        lua_version: [lua51, lua52, lua53, lua54, luajit]
        exclude:
          # Windows tooling setup is complex, focus on lua54 for now
          - os: windows-latest
            lua_version: lua51
          - os: windows-latest
            lua_version: lua52
          - os: windows-latest
            lua_version: lua53
          # Windows LuaJIT not available via chocolatey
          - os: windows-latest
            lua_version: luajit
          # macOS Homebrew only has Lua 5.4 and LuaJIT readily available
          - os: macos-latest
            lua_version: lua51
          - os: macos-latest
            lua_version: lua52
          - os: macos-latest
            lua_version: lua53
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v5
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Set env
        if: matrix.os != 'windows-latest'
        run: |
          echo "TAG_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
          VERSION="${{ github.ref_name }}"
          echo "VERSION=${VERSION#v}" >> $GITHUB_ENV
          ROCKS_VERSION=$(echo ${VERSION#v} | sed 's/\.\([0-9]*\)$/-\1/')
          echo "ROCKS_VERSION=$ROCKS_VERSION" >> $GITHUB_ENV

      - name: Set env (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "TAG_NAME=${{ github.ref_name }}" >> $env:GITHUB_ENV
          $version = "${{ github.ref_name }}".Substring(1)
          echo "VERSION=$version" >> $env:GITHUB_ENV
          $rocksVersion = $version -replace '\.(?=\d+$)', '-'
          echo "ROCKS_VERSION=$rocksVersion" >> $env:GITHUB_ENV

      - name: Install Task (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install go-task -y

      - name: Install Task (Darwin)
        if: matrix.os == 'macos-latest'
        run: |
          brew install go-task

      - name: Install Task (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo snap install task --classic

      - name: Print the version
        run: |
          echo "Tag: ${{ github.ref_name }}"
          echo "Version: ${{ env.VERSION }}"
          echo "Rocks Version: ${{ env.ROCKS_VERSION }}"
          echo "OS: ${{ matrix.os }}"
          echo "$(task --version)"

      # Set up MSVC environment on Windows (required for Lua compilation)
      - uses: ilammy/msvc-dev-cmd@v1
        if: matrix.os == 'windows-latest'

      # Install Lua using the leafo action (works great on all platforms)  
      - uses: leafo/gh-actions-lua@v11
        with:
          luaVersion: ${{ matrix.lua_version == 'lua54' && '5.4' || matrix.lua_version == 'lua53' && '5.3' || matrix.lua_version == 'lua52' && '5.2' || matrix.lua_version == 'lua51' && '5.1' || matrix.lua_version == 'luajit' && 'luajit' || '5.4' }}

      - name: Verify Lua installation
        shell: bash
        run: |
          lua -v
          echo "Lua executable path: $(which lua)"
          
      - name: Install Lua dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang libclang-dev

      - name: Install Lua dependencies (macOS)
        if: matrix.os == 'macos-latest'  
        run: |
          # leafo action handles Lua installation, just need build tools
          echo "Build tools already available on macOS"

      - name: Install Lua dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # leafo action handles everything on Windows
          echo "Lua installed via leafo action"

      - name: Set up Lua paths (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          # The leafo action installs to .lua directory structure
          LUA_EXE=$(which lua)
          LUA_BIN_DIR=$(dirname "$LUA_EXE")
          echo "Found Lua at: $LUA_BIN_DIR"
          
          
          # Look for include directory - leafo uses .lua/include structure
          POSSIBLE_INCLUDE_DIRS=(
            "$LUA_BIN_DIR/../include"
            "$LUA_BIN_DIR/include"
            "$(pwd)/.lua/include"
            "$(pwd)/.lua/include/luajit-2.1"
            "$HOME/.lua/include"
            "$HOME/.lua/include/luajit-2.1"
          )
          
          LUA_INCLUDE_DIR=""
          for dir in "${POSSIBLE_INCLUDE_DIRS[@]}"; do
            if [[ -f "$dir/lua.h" ]]; then
              LUA_INCLUDE_DIR=$(realpath "$dir")
              echo "Found headers at: $LUA_INCLUDE_DIR"
              break
            fi
          done
          
          if [[ -z "$LUA_INCLUDE_DIR" ]]; then
            echo "Error: Could not find lua.h"
            echo "Searched in:"
            for dir in "${POSSIBLE_INCLUDE_DIRS[@]}"; do
              echo "  $dir"
            done
            exit 1
          fi
          
          # Look for lib directory - leafo uses .lua/lib structure
          POSSIBLE_LIB_DIRS=(
            "$LUA_BIN_DIR/../lib"
            "$LUA_BIN_DIR/lib"
            "$(pwd)/.lua/lib"
            "$HOME/.lua/lib"
            "$LUA_BIN_DIR"
          )
          
          LUA_LIB_DIR=""
          for dir in "${POSSIBLE_LIB_DIRS[@]}"; do
            if [[ -f "$dir/liblua.a" ]] || [[ -f "$dir/liblua54.a" ]] || [[ -f "$dir/liblua.dylib" ]] || [[ -f "$dir/liblua.so" ]] || [[ -f "$dir/libluajit.a" ]] || [[ -f "$dir/libluajit-5.1.a" ]]; then
              LUA_LIB_DIR=$(realpath "$dir")
              echo "Found libraries at: $LUA_LIB_DIR"
              break
            fi
          done
          
          if [[ -z "$LUA_LIB_DIR" ]]; then
            # Default to the bin directory parent
            LUA_LIB_DIR=$(dirname "$LUA_BIN_DIR")
            echo "Defaulting to: $LUA_LIB_DIR"
          fi
          
          echo "LUA_DIR=$LUA_LIB_DIR" >> $GITHUB_ENV
          echo "LUA_INCLUDE_DIR=$LUA_INCLUDE_DIR" >> $GITHUB_ENV
          
          if [[ "${{ matrix.lua_version }}" == "luajit" ]]; then
            echo "LUAJIT_DIR=$LUA_LIB_DIR" >> $GITHUB_ENV
            echo "LUAJIT_INCLUDE_DIR=$LUA_INCLUDE_DIR" >> $GITHUB_ENV
            echo "Debug: LuaJIT library files in $LUA_LIB_DIR:"
            ls -la "$LUA_LIB_DIR"/ 2>/dev/null || echo "Could not list $LUA_LIB_DIR"
          fi

      - name: Set up Lua paths (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # The leafo action installs to .lua directory
          $luaExe = Get-Command lua -ErrorAction SilentlyContinue
          if ($luaExe) {
            $luaDir = Split-Path $luaExe.Source
            
            # Check standard leafo paths
            $luaIncludeDir = "$luaDir\..\include"
            $luaLibDir = "$luaDir\..\lib"
            
            if (Test-Path "$luaIncludeDir\lua.h") {
              $luaIncludeDir = Resolve-Path $luaIncludeDir
              echo "LUA_INCLUDE_DIR=$luaIncludeDir" >> $env:GITHUB_ENV
            } else {
              Write-Error "Could not find lua.h"
              exit 1
            }
            
            if (Test-Path "$luaLibDir\*.lib") {
              $luaLibDir = Resolve-Path $luaLibDir
              echo "LUA_DIR=$luaLibDir" >> $env:GITHUB_ENV
            } else {
              Write-Error "Could not find .lib files"
              exit 1
            }
            
            Write-Host "LUA_DIR: $luaLibDir"
            Write-Host "LUA_INCLUDE_DIR: $luaIncludeDir"
          } else {
            Write-Error "lua.exe not found in PATH"
            exit 1
          }

      - name: Build
        working-directory: rsjson
        run: |
          cargo build --release --no-default-features --features ${{ matrix.lua_version }}

      - name: Test build output (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          pwd
          ls -la .
          ls -la target/
          ls -la target/release/
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            if [[ -f "target/release/librsjson.so" ]]; then
              echo "✅ librsjson.so built successfully"
            else
              echo "❌ librsjson.so not found"
              exit 1
            fi
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            if [[ -f "target/release/librsjson.dylib" ]]; then
              echo "✅ librsjson.dylib built successfully"
            else
              echo "❌ librsjson.dylib not found"
              exit 1
            fi
          fi

      - name: Test build output (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          pwd
          Get-ChildItem . | Format-Table -AutoSize
          Get-ChildItem target/ | Format-Table -AutoSize
          Get-ChildItem target/release/ | Format-Table -AutoSize
          if (Test-Path "target/release/rsjson.dll") {
            Write-Host "✅ rsjson.dll built successfully"
          } else {
            Write-Error "❌ rsjson.dll not found"
            exit 1
          }

      - name: Upload Artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: rsjson-${{ matrix.lua_version }}-linux
          path: target/release/librsjson.so

      - name: Upload Artifact (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: rsjson-${{ matrix.lua_version }}-macos
          path: target/release/librsjson.dylib

      - name: Upload Artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: rsjson-${{ matrix.lua_version }}-windows
          path: target/release/rsjson.dll

      - name: Install LuaRocks and build rockspec (Linux/macOS)
        if: matrix.lua_version == 'lua54' && matrix.os != 'windows-latest' && startsWith(github.ref, 'refs/tags/')
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt update
            sudo apt install -y luarocks
            sed "s/{{VERSION}}/${{ env.ROCKS_VERSION }}/g" rsjson-template.rockspec > rsjson-${{ env.ROCKS_VERSION }}.rockspec
            sudo luarocks make --pack-binary-rock rsjson-${{ env.ROCKS_VERSION }}.rockspec
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install luarocks
            sed "s/{{VERSION}}/${{ env.ROCKS_VERSION }}/g" rsjson-template.rockspec > rsjson-${{ env.ROCKS_VERSION }}.rockspec
            luarocks make --pack-binary-rock rsjson-${{ env.ROCKS_VERSION }}.rockspec
          fi

      - name: Install LuaRocks and build rockspec (Windows)
        if: matrix.lua_version == 'lua54' && matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/')
        shell: pwsh
        run: |
          choco install luarocks
          (Get-Content rsjson-template.rockspec) -replace '{{VERSION}}', $env:ROCKS_VERSION | Set-Content rsjson-${{ env.ROCKS_VERSION }}.rockspec
          luarocks make --pack-binary-rock rsjson-${{ env.ROCKS_VERSION }}.rockspec

      - name: Upload LuaRocks Package
        if: matrix.lua_version == 'lua54' && startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: rsjson-${{ matrix.os }}.rock
          path: rsjson-${{ env.ROCKS_VERSION }}.*.rock

      - name: Release
        if: startsWith(github.ref, 'refs/tags/') && matrix.lua_version == 'lua54'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: |
            rsjson-${{ env.ROCKS_VERSION }}.*.rock
            target/release/*.so
            target/release/*.dylib
            target/release/*.dll

  docker-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Run Docker test suite
        run: |
          cd docker
          chmod +x test-simple.sh
          ./test-simple.sh


#      - name: Install LuaRocks (Linux)
#        if: matrix.os == 'ubuntu-latest'
#        run: |
#          sudo apt update
#          sudo apt upgrade -y
#          sudo apt install build-essential libreadline-dev unzip clang libclang-dev
#          sudo snap install task --classic
#          sudo apt install -y luarocks lua5.4 luajit liblua5.4-dev libluajit-5.1-dev
#          sudo luarocks install dkjson

#      - name: Install LuaRocks (macOS)
#        if: matrix.os == 'macos-latest'
#        run: |
#          brew update
#          brew install luarocks
#          luarocks install dkjson
#
#      - name: Install LuaRocks (Windows)
#        if: matrix.os == 'windows-latest'
#        run: |
#          choco install luarocks
#          luarocks install dkjson
#
#      - name: Prepare rockspec file (Non-Windows)
#        if: matrix.os != 'windows-latest'
#        run: |
#          # load 'rsjson-template.rockspec' and replace '{{VERSION}}' with the current version
#          sed "s/{{VERSION}}/${{ env.ROCKS_VERSION }}/g" rsjson-template.rockspec > rsjson-${{ env.ROCKS_VERSION }}.rockspec
#
#      - name: Prepare rockspec file (Windows)
#        if: matrix.os == 'windows-latest'
#        run: |
#          # load 'rsjson-template.rockspec' and replace '{{VERSION}}' with the current version
#          (Get-Content rsjson-template.rockspec) -replace '{{VERSION}}', $env:ROCKS_VERSION | Set-Content rsjson-${{ env.ROCKS_VERSION }}.rockspec
#
#      - name: Build LuaRocks Package (Non-Windows)
#        if: matrix.os != 'windows-latest'
#        run: |
#          sudo luarocks make --pack-binary-rock rsjson-${{ env.ROCKS_VERSION }}.rockspec
#
#      - name: Build LuaRocks Package (Windows)
#        if: matrix.os == 'windows-latest'
#        run: |
#          luarocks make --pack-binary-rock rsjson-${{ env.ROCKS_VERSION }}.rockspec
#
#      - name: Upload LuaRocks Package
#        uses: actions/upload-artifact@v4
#        with:
#          name: rsjson-${{ matrix.os }}.rock
#          path: rsjson-${{ env.ROCKS_VERSION }}.*.rock
#
#      - name: Release
#        if: startsWith(github.ref, 'refs/tags/')
#        uses: softprops/action-gh-release@v2
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ env.TAG_NAME }}
#          files: |
#            rsjson-${{ env.ROCKS_VERSION }}.*.rock
#            *.so
#            *.dylib
#            *.dll
#

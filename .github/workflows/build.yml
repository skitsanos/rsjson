name: Build rsjson lib

on: 
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest] # ubuntu-latest, macos-latest]
        lua_version: [lua54] # lua51, lua52, lua53, luajit]
        # exclude:
        #   # Windows tooling setup is complex, focus on Linux/macOS for now
        #   - os: windows-latest
        #     lua_version: lua51
        #   - os: windows-latest
        #     lua_version: lua52
        #   - os: windows-latest
        #     lua_version: lua53
        #   # Windows LuaJIT not available via chocolatey
        #   - os: windows-latest
        #     lua_version: luajit
        #   # macOS Homebrew only has Lua 5.4 and LuaJIT readily available
        #   - os: macos-latest
        #     lua_version: lua51
        #   - os: macos-latest
        #     lua_version: lua52
        #   - os: macos-latest
        #     lua_version: lua53
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v5
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Set env
        if: matrix.os != 'windows-latest'
        run: |
          echo "TAG_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
          VERSION="${{ github.ref_name }}"
          echo "VERSION=${VERSION#v}" >> $GITHUB_ENV
          ROCKS_VERSION=$(echo ${VERSION#v} | sed 's/\.\([0-9]*\)$/-\1/')
          echo "ROCKS_VERSION=$ROCKS_VERSION" >> $GITHUB_ENV

      - name: Set env (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "TAG_NAME=${{ github.ref_name }}" >> $env:GITHUB_ENV
          $version = "${{ github.ref_name }}".Substring(1)
          echo "VERSION=$version" >> $env:GITHUB_ENV
          $rocksVersion = $version -replace '\.(?=\d+$)', '-'
          echo "ROCKS_VERSION=$rocksVersion" >> $env:GITHUB_ENV

      - name: Install Task (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install go-task -y

      - name: Install Task (Darwin)
        if: matrix.os == 'macos-latest'
        run: |
          brew install go-task

      - name: Install Task (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo snap install task --classic

      - name: Print the version
        run: |
          echo "Tag: ${{ github.ref_name }}"
          echo "Version: ${{ env.VERSION }}"
          echo "Rocks Version: ${{ env.ROCKS_VERSION }}"
          echo "OS: ${{ matrix.os }}"
          echo "$(task --version)"

      # Set up MSVC environment on Windows (required for Lua compilation)
      - uses: ilammy/msvc-dev-cmd@v1
        if: matrix.os == 'windows-latest'

      # Install Lua using the leafo action (works great on Windows)  
      - uses: leafo/gh-actions-lua@v11
        if: matrix.os == 'windows-latest'
        with:
          luaVersion: "5.4"

      - name: Verify Lua installation
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          lua -v
          Write-Host "Lua executable path: $(Get-Command lua | Select-Object -ExpandProperty Source)"
          $luaDir = Split-Path (Get-Command lua).Source
          Write-Host "Lua directory contents:"
          Get-ChildItem $luaDir -Recurse | Select-Object FullName, Length | Format-Table -AutoSize

      # - uses: KyleMayes/install-llvm-action@v2
      #   if: matrix.os == 'windows-latest'
      #   with:
      #     version: "14.0"

      # - name: Install Lua dependencies (Ubuntu)
      #   if: matrix.os == 'ubuntu-latest'
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y build-essential clang libclang-dev
      #     if [[ "${{ matrix.lua_version }}" == "lua51" ]]; then
      #       sudo apt-get install -y lua5.1-dev
      #       echo "LUA_DIR=/usr" >> $GITHUB_ENV
      #       echo "LUA_INCLUDE_DIR=/usr/include/lua5.1" >> $GITHUB_ENV
      #     elif [[ "${{ matrix.lua_version }}" == "lua52" ]]; then
      #       sudo apt-get install -y lua5.2-dev
      #       echo "LUA_DIR=/usr" >> $GITHUB_ENV
      #       echo "LUA_INCLUDE_DIR=/usr/include/lua5.2" >> $GITHUB_ENV
      #     elif [[ "${{ matrix.lua_version }}" == "lua53" ]]; then
      #       sudo apt-get install -y lua5.3-dev
      #       echo "LUA_DIR=/usr" >> $GITHUB_ENV
      #       echo "LUA_INCLUDE_DIR=/usr/include/lua5.3" >> $GITHUB_ENV
      #     elif [[ "${{ matrix.lua_version }}" == "lua54" ]]; then
      #       sudo apt-get install -y lua5.4-dev
      #       echo "LUA_DIR=/usr" >> $GITHUB_ENV
      #       echo "LUA_INCLUDE_DIR=/usr/include/lua5.4" >> $GITHUB_ENV
      #     elif [[ "${{ matrix.lua_version }}" == "luajit" ]]; then
      #       sudo apt-get install -y libluajit-5.1-dev
      #       echo "LUAJIT_DIR=/usr" >> $GITHUB_ENV
      #       echo "LUAJIT_INCLUDE_DIR=/usr/include/luajit-2.1" >> $GITHUB_ENV
      #     fi

      # - name: Install Lua dependencies (macOS)
      #   if: matrix.os == 'macos-latest'
      #   run: |
      #     if [[ "${{ matrix.lua_version }}" == "luajit" ]]; then
      #       brew install luajit
      #       echo "LUAJIT_DIR=$(brew --prefix luajit)/lib" >> $GITHUB_ENV
      #       echo "LUAJIT_INCLUDE_DIR=$(brew --prefix luajit)/include/luajit-2.1" >> $GITHUB_ENV
      #     else
      #       brew install lua
      #       echo "LUA_DIR=$(brew --prefix lua)/lib" >> $GITHUB_ENV
      #       echo "LUA_INCLUDE_DIR=$(brew --prefix lua)/include/lua" >> $GITHUB_ENV
      #     fi

      - name: Set up Lua paths for Windows build
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # The leafo/gh-actions-lua action installs Lua to a standard location
          # We need to find where it installed Lua and set up environment variables
          $luaExe = Get-Command lua -ErrorAction SilentlyContinue
          if ($luaExe) {
            $luaDir = Split-Path $luaExe.Source
            Write-Host "Found Lua at: $luaDir"
            
            # Look for include directory (usually relative to lua.exe)
            $possibleIncludeDirs = @(
              "$luaDir\..\include",
              "$luaDir\include", 
              "$luaDir\..\src",
              "$luaDir\src"
            )
            
            $luaIncludeDir = $null
            foreach ($dir in $possibleIncludeDirs) {
              $resolved = Resolve-Path $dir -ErrorAction SilentlyContinue
              if ($resolved -and (Test-Path "$resolved\lua.h")) {
                $luaIncludeDir = $resolved.Path
                break
              }
            }
            
            if (-not $luaIncludeDir) {
              Write-Error "Could not find lua.h header file"
              exit 1
            }
            
            # Look for lib directory  
            $possibleLibDirs = @(
              "$luaDir\..\lib",
              "$luaDir\lib",
              $luaDir
            )
            
            $luaLibDir = $null
            foreach ($dir in $possibleLibDirs) {
              $resolved = Resolve-Path $dir -ErrorAction SilentlyContinue
              if ($resolved -and ((Test-Path "$resolved\lua54.lib") -or (Test-Path "$resolved\lua.lib"))) {
                $luaLibDir = $resolved.Path
                break
              }
            }
            
            if (-not $luaLibDir) {
              $luaLibDir = $luaDir
            }
            
            Write-Host "Using LUA_DIR: $luaLibDir"
            Write-Host "Using LUA_INCLUDE_DIR: $luaIncludeDir"
            
            echo "LUA_DIR=$luaLibDir" >> $env:GITHUB_ENV
            echo "LUA_INCLUDE_DIR=$luaIncludeDir" >> $env:GITHUB_ENV
          } else {
            Write-Error "lua.exe not found in PATH"
            exit 1
          }

      - name: Build
        working-directory: rsjson
        run: |
          cargo build --release --no-default-features --features ${{ matrix.lua_version }}

      - name: Test build output
        shell: pwsh
        run: |
          pwd
          ls -la .
          ls -la target/
          ls -la target/release/
          if (Test-Path "target/release/rsjson.dll") {
            Write-Host "✅ rsjson.dll built successfully"
          } else {
            Write-Error "❌ rsjson.dll not found"
            exit 1
          }

      # - name: Upload Artifact (Linux)
      #   if: matrix.os == 'ubuntu-latest'
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: rsjson-${{ matrix.lua_version }}-linux
      #     path: target/release/librsjson.so

      # - name: Upload Artifact (macOS)
      #   if: matrix.os == 'macos-latest'
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: rsjson-${{ matrix.lua_version }}-macos
      #     path: target/release/librsjson.dylib

      - name: Upload Artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: rsjson-${{ matrix.lua_version }}-windows
          path: target/release/rsjson.dll

      - name: Install LuaRocks and build rockspec (Linux/macOS)
        if: matrix.lua_version == 'lua54' && matrix.os != 'windows-latest' && startsWith(github.ref, 'refs/tags/')
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt update
            sudo apt install -y luarocks
            sed "s/{{VERSION}}/${{ env.ROCKS_VERSION }}/g" rsjson-template.rockspec > rsjson-${{ env.ROCKS_VERSION }}.rockspec
            sudo luarocks make --pack-binary-rock rsjson-${{ env.ROCKS_VERSION }}.rockspec
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install luarocks
            sed "s/{{VERSION}}/${{ env.ROCKS_VERSION }}/g" rsjson-template.rockspec > rsjson-${{ env.ROCKS_VERSION }}.rockspec
            luarocks make --pack-binary-rock rsjson-${{ env.ROCKS_VERSION }}.rockspec
          fi

      - name: Install LuaRocks and build rockspec (Windows)
        if: matrix.lua_version == 'lua54' && matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/')
        shell: pwsh
        run: |
          choco install luarocks
          (Get-Content rsjson-template.rockspec) -replace '{{VERSION}}', $env:ROCKS_VERSION | Set-Content rsjson-${{ env.ROCKS_VERSION }}.rockspec
          luarocks make --pack-binary-rock rsjson-${{ env.ROCKS_VERSION }}.rockspec

      - name: Upload LuaRocks Package
        if: matrix.lua_version == 'lua54' && startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: rsjson-${{ matrix.os }}.rock
          path: rsjson-${{ env.ROCKS_VERSION }}.*.rock

      - name: Release
        if: startsWith(github.ref, 'refs/tags/') && matrix.lua_version == 'lua54'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: |
            rsjson-${{ env.ROCKS_VERSION }}.*.rock
            target/release/*.so
            target/release/*.dylib
            target/release/*.dll

  # docker-test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v5
  #     
  #     - name: Run Docker test suite
  #       run: |
  #         cd docker
  #         chmod +x test-simple.sh
  #         ./test-simple.sh


#      - name: Install LuaRocks (Linux)
#        if: matrix.os == 'ubuntu-latest'
#        run: |
#          sudo apt update
#          sudo apt upgrade -y
#          sudo apt install build-essential libreadline-dev unzip clang libclang-dev
#          sudo snap install task --classic
#          sudo apt install -y luarocks lua5.4 luajit liblua5.4-dev libluajit-5.1-dev
#          sudo luarocks install dkjson

#      - name: Install LuaRocks (macOS)
#        if: matrix.os == 'macos-latest'
#        run: |
#          brew update
#          brew install luarocks
#          luarocks install dkjson
#
#      - name: Install LuaRocks (Windows)
#        if: matrix.os == 'windows-latest'
#        run: |
#          choco install luarocks
#          luarocks install dkjson
#
#      - name: Prepare rockspec file (Non-Windows)
#        if: matrix.os != 'windows-latest'
#        run: |
#          # load 'rsjson-template.rockspec' and replace '{{VERSION}}' with the current version
#          sed "s/{{VERSION}}/${{ env.ROCKS_VERSION }}/g" rsjson-template.rockspec > rsjson-${{ env.ROCKS_VERSION }}.rockspec
#
#      - name: Prepare rockspec file (Windows)
#        if: matrix.os == 'windows-latest'
#        run: |
#          # load 'rsjson-template.rockspec' and replace '{{VERSION}}' with the current version
#          (Get-Content rsjson-template.rockspec) -replace '{{VERSION}}', $env:ROCKS_VERSION | Set-Content rsjson-${{ env.ROCKS_VERSION }}.rockspec
#
#      - name: Build LuaRocks Package (Non-Windows)
#        if: matrix.os != 'windows-latest'
#        run: |
#          sudo luarocks make --pack-binary-rock rsjson-${{ env.ROCKS_VERSION }}.rockspec
#
#      - name: Build LuaRocks Package (Windows)
#        if: matrix.os == 'windows-latest'
#        run: |
#          luarocks make --pack-binary-rock rsjson-${{ env.ROCKS_VERSION }}.rockspec
#
#      - name: Upload LuaRocks Package
#        uses: actions/upload-artifact@v4
#        with:
#          name: rsjson-${{ matrix.os }}.rock
#          path: rsjson-${{ env.ROCKS_VERSION }}.*.rock
#
#      - name: Release
#        if: startsWith(github.ref, 'refs/tags/')
#        uses: softprops/action-gh-release@v2
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ env.TAG_NAME }}
#          files: |
#            rsjson-${{ env.ROCKS_VERSION }}.*.rock
#            *.so
#            *.dylib
#            *.dll
#

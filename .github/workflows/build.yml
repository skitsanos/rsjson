name: Build rsjson lib

on: 
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        lua_version: [lua51, lua52, lua53, lua54, luajit]
        exclude:
          # Windows tooling setup is complex, focus on Linux/macOS for now
          - os: windows-latest
            lua_version: lua51
          - os: windows-latest
            lua_version: lua52
          - os: windows-latest
            lua_version: lua53
          # Windows LuaJIT not available via chocolatey
          - os: windows-latest
            lua_version: luajit
          # macOS Homebrew only has Lua 5.4 and LuaJIT readily available
          - os: macos-latest
            lua_version: lua51
          - os: macos-latest
            lua_version: lua52
          - os: macos-latest
            lua_version: lua53
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v5
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Set env
        if: matrix.os != 'windows-latest'
        run: |
          echo "TAG_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
          VERSION="${{ github.ref_name }}"
          echo "VERSION=${VERSION#v}" >> $GITHUB_ENV
          ROCKS_VERSION=$(echo ${VERSION#v} | sed 's/\.\([0-9]*\)$/-\1/')
          echo "ROCKS_VERSION=$ROCKS_VERSION" >> $GITHUB_ENV

      - name: Set env (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "TAG_NAME=${{ github.ref_name }}" >> $env:GITHUB_ENV
          $version = "${{ github.ref_name }}".Substring(1)
          echo "VERSION=$version" >> $env:GITHUB_ENV
          $rocksVersion = $version -replace '\.(?=\d+$)', '-'
          echo "ROCKS_VERSION=$rocksVersion" >> $env:GITHUB_ENV

      - name: Install Task (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install go-task -y

      - name: Install Task (Darwin)
        if: matrix.os == 'macos-latest'
        run: |
          brew install go-task

      - name: Install Task (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo snap install task --classic

      - name: Print the version
        run: |
          echo "Tag: ${{ github.ref_name }}"
          echo "Version: ${{ env.VERSION }}"
          echo "Rocks Version: ${{ env.ROCKS_VERSION }}"
          echo "OS: ${{ matrix.os }}"
          echo "$(task --version)"

      - uses: KyleMayes/install-llvm-action@v2
        if: matrix.os == 'windows-latest'
        with:
          version: "14.0"

      - name: Install Lua dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang libclang-dev
          if [[ "${{ matrix.lua_version }}" == "lua51" ]]; then
            sudo apt-get install -y lua5.1-dev
            echo "LUA_DIR=/usr" >> $GITHUB_ENV
            echo "LUA_INCLUDE_DIR=/usr/include/lua5.1" >> $GITHUB_ENV
          elif [[ "${{ matrix.lua_version }}" == "lua52" ]]; then
            sudo apt-get install -y lua5.2-dev
            echo "LUA_DIR=/usr" >> $GITHUB_ENV
            echo "LUA_INCLUDE_DIR=/usr/include/lua5.2" >> $GITHUB_ENV
          elif [[ "${{ matrix.lua_version }}" == "lua53" ]]; then
            sudo apt-get install -y lua5.3-dev
            echo "LUA_DIR=/usr" >> $GITHUB_ENV
            echo "LUA_INCLUDE_DIR=/usr/include/lua5.3" >> $GITHUB_ENV
          elif [[ "${{ matrix.lua_version }}" == "lua54" ]]; then
            sudo apt-get install -y lua5.4-dev
            echo "LUA_DIR=/usr" >> $GITHUB_ENV
            echo "LUA_INCLUDE_DIR=/usr/include/lua5.4" >> $GITHUB_ENV
          elif [[ "${{ matrix.lua_version }}" == "luajit" ]]; then
            sudo apt-get install -y libluajit-5.1-dev
            echo "LUAJIT_DIR=/usr" >> $GITHUB_ENV
            echo "LUAJIT_INCLUDE_DIR=/usr/include/luajit-2.1" >> $GITHUB_ENV
          fi

      - name: Install Lua dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          if [[ "${{ matrix.lua_version }}" == "luajit" ]]; then
            brew install luajit
            echo "LUAJIT_DIR=$(brew --prefix luajit)/lib" >> $GITHUB_ENV
            echo "LUAJIT_INCLUDE_DIR=$(brew --prefix luajit)/include/luajit-2.1" >> $GITHUB_ENV
          else
            brew install lua
            echo "LUA_DIR=$(brew --prefix lua)/lib" >> $GITHUB_ENV
            echo "LUA_INCLUDE_DIR=$(brew --prefix lua)/include/lua" >> $GITHUB_ENV
          fi

      - name: Install Lua dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Install Lua (LuaJIT excluded from Windows matrix)
          choco install lua
          # Set environment variables for Lua
          $luaPath = "C:\ProgramData\chocolatey\lib\lua\tools"
          echo "LUA_DIR=$luaPath" >> $env:GITHUB_ENV
          echo "LUA_INCLUDE_DIR=$luaPath\include" >> $env:GITHUB_ENV

      - name: Build
        working-directory: rsjson
        run: |
          cargo build --release --no-default-features --features ${{ matrix.lua_version }}

      - name: Test build output
        run: |
          pwd
          ls -la .
          ls -la target/
          ls -la target/release/
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            test -f target/release/librsjson.so
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            test -f target/release/librsjson.dylib
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            test -f target/release/rsjson.dll
          fi

      - name: Upload Artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: rsjson-${{ matrix.lua_version }}-linux
          path: target/release/librsjson.so

      - name: Upload Artifact (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: rsjson-${{ matrix.lua_version }}-macos
          path: target/release/librsjson.dylib

      - name: Upload Artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: rsjson-${{ matrix.lua_version }}-windows
          path: target/release/rsjson.dll

      - name: Install LuaRocks and build rockspec (Linux/macOS)
        if: matrix.lua_version == 'lua54' && matrix.os != 'windows-latest' && startsWith(github.ref, 'refs/tags/')
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt update
            sudo apt install -y luarocks
            sed "s/{{VERSION}}/${{ env.ROCKS_VERSION }}/g" rsjson-template.rockspec > rsjson-${{ env.ROCKS_VERSION }}.rockspec
            sudo luarocks make --pack-binary-rock rsjson-${{ env.ROCKS_VERSION }}.rockspec
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install luarocks
            sed "s/{{VERSION}}/${{ env.ROCKS_VERSION }}/g" rsjson-template.rockspec > rsjson-${{ env.ROCKS_VERSION }}.rockspec
            luarocks make --pack-binary-rock rsjson-${{ env.ROCKS_VERSION }}.rockspec
          fi

      - name: Install LuaRocks and build rockspec (Windows)
        if: matrix.lua_version == 'lua54' && matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/')
        shell: pwsh
        run: |
          choco install luarocks
          (Get-Content rsjson-template.rockspec) -replace '{{VERSION}}', $env:ROCKS_VERSION | Set-Content rsjson-${{ env.ROCKS_VERSION }}.rockspec
          luarocks make --pack-binary-rock rsjson-${{ env.ROCKS_VERSION }}.rockspec

      - name: Upload LuaRocks Package
        if: matrix.lua_version == 'lua54' && startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: rsjson-${{ matrix.os }}.rock
          path: rsjson-${{ env.ROCKS_VERSION }}.*.rock

      - name: Release
        if: startsWith(github.ref, 'refs/tags/') && matrix.lua_version == 'lua54'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: |
            rsjson-${{ env.ROCKS_VERSION }}.*.rock
            target/release/*.so
            target/release/*.dylib
            target/release/*.dll

  docker-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Run Docker test suite
        run: |
          cd docker
          chmod +x test-simple.sh
          ./test-simple.sh


#      - name: Install LuaRocks (Linux)
#        if: matrix.os == 'ubuntu-latest'
#        run: |
#          sudo apt update
#          sudo apt upgrade -y
#          sudo apt install build-essential libreadline-dev unzip clang libclang-dev
#          sudo snap install task --classic
#          sudo apt install -y luarocks lua5.4 luajit liblua5.4-dev libluajit-5.1-dev
#          sudo luarocks install dkjson

#      - name: Install LuaRocks (macOS)
#        if: matrix.os == 'macos-latest'
#        run: |
#          brew update
#          brew install luarocks
#          luarocks install dkjson
#
#      - name: Install LuaRocks (Windows)
#        if: matrix.os == 'windows-latest'
#        run: |
#          choco install luarocks
#          luarocks install dkjson
#
#      - name: Prepare rockspec file (Non-Windows)
#        if: matrix.os != 'windows-latest'
#        run: |
#          # load 'rsjson-template.rockspec' and replace '{{VERSION}}' with the current version
#          sed "s/{{VERSION}}/${{ env.ROCKS_VERSION }}/g" rsjson-template.rockspec > rsjson-${{ env.ROCKS_VERSION }}.rockspec
#
#      - name: Prepare rockspec file (Windows)
#        if: matrix.os == 'windows-latest'
#        run: |
#          # load 'rsjson-template.rockspec' and replace '{{VERSION}}' with the current version
#          (Get-Content rsjson-template.rockspec) -replace '{{VERSION}}', $env:ROCKS_VERSION | Set-Content rsjson-${{ env.ROCKS_VERSION }}.rockspec
#
#      - name: Build LuaRocks Package (Non-Windows)
#        if: matrix.os != 'windows-latest'
#        run: |
#          sudo luarocks make --pack-binary-rock rsjson-${{ env.ROCKS_VERSION }}.rockspec
#
#      - name: Build LuaRocks Package (Windows)
#        if: matrix.os == 'windows-latest'
#        run: |
#          luarocks make --pack-binary-rock rsjson-${{ env.ROCKS_VERSION }}.rockspec
#
#      - name: Upload LuaRocks Package
#        uses: actions/upload-artifact@v4
#        with:
#          name: rsjson-${{ matrix.os }}.rock
#          path: rsjson-${{ env.ROCKS_VERSION }}.*.rock
#
#      - name: Release
#        if: startsWith(github.ref, 'refs/tags/')
#        uses: softprops/action-gh-release@v2
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ env.TAG_NAME }}
#          files: |
#            rsjson-${{ env.ROCKS_VERSION }}.*.rock
#            *.so
#            *.dylib
#            *.dll
#
